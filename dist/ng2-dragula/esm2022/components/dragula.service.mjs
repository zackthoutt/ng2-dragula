import { Injectable, Optional } from '@angular/core';
import { Group } from '../Group';
import { Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { EventTypes, AllEvents } from '../EventTypes';
import { DrakeFactory } from '../DrakeFactory';
import * as i0 from "@angular/core";
import * as i1 from "../DrakeFactory";
const filterEvent = (eventType, filterDragType, projector) => (input) => {
    return input.pipe(filter(({ event, name }) => {
        return (event === eventType &&
            (filterDragType === undefined || name === filterDragType));
    }), map(({ name, args }) => projector(name, args)));
};
const elContainerSourceProjector = (name, [el, container, source]) => ({ name, el, container, source });
export class DragulaService {
    constructor(drakeFactory) {
        this.drakeFactory = drakeFactory;
        this.groups = {};
        this.dispatch$ = new Subject();
        this.elContainerSource = (eventType) => (groupName) => this.dispatch$.pipe(filterEvent(eventType, groupName, elContainerSourceProjector));
        /* https://github.com/bevacqua/dragula#drakeon-events */
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.cancel = this.elContainerSource(EventTypes.Cancel);
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.remove = this.elContainerSource(EventTypes.Remove);
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.shadow = this.elContainerSource(EventTypes.Shadow);
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.over = this.elContainerSource(EventTypes.Over);
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.out = this.elContainerSource(EventTypes.Out);
        this.drag = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.Drag, groupName, (name, [el, source]) => ({ name, el, source })));
        this.dragend = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.DragEnd, groupName, (name, [el]) => ({
            name,
            el,
        })));
        this.drop = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.Drop, groupName, (name, [el, target, source, sibling]) => {
            return { name, el, target, source, sibling };
        }));
        this.cloned = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.Cloned, groupName, (name, [clone, original, cloneType]) => {
            return { name, clone, original, cloneType };
        }));
        this.dropModel = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.DropModel, groupName, (name, [el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex,]) => {
            return {
                name,
                el,
                target,
                source,
                sibling,
                item,
                sourceModel,
                targetModel,
                sourceIndex,
                targetIndex,
            };
        }));
        this.removeModel = (groupName) => this.dispatch$.pipe(filterEvent(EventTypes.RemoveModel, groupName, (name, [el, container, source, item, sourceModel, sourceIndex]) => {
            return {
                name,
                el,
                container,
                source,
                item,
                sourceModel,
                sourceIndex,
            };
        }));
        if (this.drakeFactory === null || this.drakeFactory === undefined) {
            this.drakeFactory = new DrakeFactory();
        }
    }
    /** Public mainly for testing purposes. Prefer `createGroup()`. */
    add(group) {
        const existingGroup = this.find(group.name);
        if (existingGroup) {
            throw new Error('Group named: "' + group.name + '" already exists.');
        }
        this.groups[group.name] = group;
        this.handleModels(group);
        this.setupEvents(group);
        return group;
    }
    find(name) {
        return this.groups[name];
    }
    destroy(name) {
        const group = this.find(name);
        if (!group) {
            return;
        }
        group.drake && group.drake.destroy();
        delete this.groups[name];
    }
    /**
     * Creates a group with the specified name and options.
     *
     * Note: formerly known as `setOptions`
     */
    createGroup(name, options) {
        return this.add(new Group(name, this.drakeFactory.build([], options), options));
    }
    handleModels({ name, drake, options }) {
        let dragElm;
        let dragIndex;
        let dropIndex;
        drake.on('remove', (el, container, source) => {
            if (!drake.models) {
                return;
            }
            let sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel = sourceModel.slice(0); // clone it
            const item = sourceModel.splice(dragIndex, 1)[0];
            this.dispatch$.next({
                event: EventTypes.RemoveModel,
                name,
                args: [el, container, source, item, sourceModel, dragIndex],
            });
        });
        drake.on('drag', (el, source) => {
            if (!drake.models) {
                return;
            }
            dragElm = el;
            dragIndex = this.domIndexOf(el, source);
        });
        drake.on('drop', (dropElm, target, source, sibling) => {
            if (!drake.models || !target) {
                return;
            }
            dropIndex = this.domIndexOf(dropElm, target);
            let sourceModel = drake.models[drake.containers.indexOf(source)];
            let targetModel = drake.models[drake.containers.indexOf(target)];
            let item;
            if (target === source) {
                sourceModel = sourceModel.slice(0);
                item = sourceModel.splice(dragIndex, 1)[0];
                sourceModel.splice(dropIndex, 0, item);
                // this was true before we cloned and updated sourceModel,
                // but targetModel still has the old value
                targetModel = sourceModel;
            }
            else {
                const isCopying = dragElm !== dropElm;
                item = sourceModel[dragIndex];
                if (isCopying) {
                    if (!options.copyItem) {
                        throw new Error('If you have enabled `copy` on a group, you must provide a `copyItem` function.');
                    }
                    item = options.copyItem(item);
                }
                if (!isCopying) {
                    sourceModel = sourceModel.slice(0);
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel = targetModel.slice(0);
                targetModel.splice(dropIndex, 0, item);
                if (isCopying) {
                    try {
                        target.removeChild(dropElm);
                        // eslint-disable-next-line no-empty
                    }
                    catch (e) { }
                }
            }
            this.dispatch$.next({
                event: EventTypes.DropModel,
                name,
                args: [
                    dropElm,
                    target,
                    source,
                    sibling,
                    item,
                    sourceModel,
                    targetModel,
                    dragIndex,
                    dropIndex,
                ],
            });
        });
    }
    setupEvents(group) {
        if (group.initEvents) {
            return;
        }
        group.initEvents = true;
        const name = group.name;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const that = this;
        const emitter = (event) => {
            switch (event) {
                case EventTypes.Drag:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.Drop:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.DragEnd:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.Cancel:
                case EventTypes.Remove:
                case EventTypes.Shadow:
                case EventTypes.Over:
                case EventTypes.Out:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.Cloned:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.DropModel:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                case EventTypes.RemoveModel:
                    group.drake.on(event, (...args) => {
                        this.dispatch$.next({ event, name, args });
                    });
                    break;
                default:
                    break;
            }
        };
        AllEvents.forEach(emitter);
    }
    domIndexOf(child, parent) {
        if (parent) {
            return Array.prototype.indexOf.call(parent.children, child);
        }
    }
    static { this.ɵfac = function DragulaService_Factory(t) { return new (t || DragulaService)(i0.ɵɵinject(i1.DrakeFactory, 8)); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DragulaService, factory: DragulaService.ɵfac, providedIn: 'root' }); }
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DragulaService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.DrakeFactory, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,